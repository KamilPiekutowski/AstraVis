#version 150 compatibility
#extension GL_ARB_gpu_shader5 : enable




varying vec3 var_Attribs;

varying float unif_Alpha;

out vec3 colorToGeom;


// cyan to purple
uniform vec3 colors1[32] = vec3[32](
                                    vec3(0.500, 1.000, 1.000), vec3(0.000, 1.000, 1.000), vec3(0.000, 1.000, 1.000), vec3(0.000, 1.000, 1.000),
                                    vec3(0.000, 0.992, 1.000), vec3(0.000, 0.957, 1.000), vec3(0.000, 0.925, 1.000), vec3(0.000, 0.890, 1.000),
                                    vec3(0.000, 0.859, 1.000), vec3(0.000, 0.827, 1.000), vec3(0.000, 0.796, 1.000), vec3(0.000, 0.765, 1.000),
                                    vec3(0.000, 0.733, 1.000), vec3(0.000, 0.702, 1.000), vec3(0.012, 0.671, 1.000), vec3(0.192, 0.639, 1.000),
                                    vec3(0.275, 0.608, 1.000), vec3(0.333, 0.580, 1.000), vec3(0.380, 0.549, 0.984), vec3(0.424, 0.518, 0.973),
                                    vec3(0.463, 0.490, 0.957), vec3(0.498, 0.459, 0.945), vec3(0.525, 0.431, 0.929), vec3(0.553, 0.400, 0.914),
                                    vec3(0.580, 0.369, 0.902), vec3(0.604, 0.341, 0.886), vec3(0.627, 0.310, 0.871), vec3(0.647, 0.282, 0.851),
                                    vec3(0.667, 0.251, 0.835), vec3(0.682, 0.224, 0.820), vec3(0.698, 0.196, 0.804), vec3(0.718, 0.173, 0.788)
                                    
                                    );


// white to black, grayscale (.965)
uniform vec3 colors2[32] = vec3[32](
                                    vec3(1.000, 1.000, 1.000), vec3(1.000, 1.000, 1.000), vec3(0.925, 0.925, 0.925), vec3(0.890, 0.890, 0.890),
                                    vec3(0.855, 0.855, 0.855), vec3(0.820, 0.820, 0.820), vec3(0.784, 0.784, 0.784), vec3(0.749, 0.749, 0.749),
                                    vec3(0.714, 0.714, 0.714), vec3(0.682, 0.682, 0.682), vec3(0.647, 0.647, 0.647), vec3(0.612, 0.612, 0.612),
                                    vec3(0.580, 0.580, 0.580), vec3(0.549, 0.549, 0.549), vec3(0.514, 0.514, 0.514), vec3(0.482, 0.482, 0.482),
                                    vec3(0.451, 0.451, 0.451), vec3(0.420, 0.420, 0.420), vec3(0.388, 0.388, 0.388), vec3(0.357, 0.357, 0.357),
                                    vec3(0.325, 0.325, 0.325), vec3(0.298, 0.298, 0.298), vec3(0.267, 0.267, 0.267), vec3(0.239, 0.239, 0.239),
                                    vec3(0.212, 0.212, 0.212), vec3(0.184, 0.184, 0.184), vec3(0.157, 0.157, 0.157), vec3(0.129, 0.129, 0.129),
                                    vec3(0.106, 0.106, 0.106), vec3(0.078, 0.078, 0.078), vec3(0.047, 0.047, 0.047), vec3(0.000, 0.000, 0.000)
                                    
                                    );


// multi-hue, white->yelow->green->blue->purple->red
uniform vec3 colors3[32] = vec3[32](
                                    vec3(1.000, 1.000, 1.000), vec3(1.000, 0.969, 0.969), vec3(1.000, 0.941, 0.922), vec3(1.000, 0.922, 0.863),
                                    vec3(1.000, 0.906, 0.796), vec3(1.000, 0.894, 0.725), vec3(0.973, 0.890, 0.655), vec3(0.918, 0.890, 0.592),
                                    vec3(0.847, 0.890, 0.541), vec3(0.761, 0.894, 0.514), vec3(0.659, 0.898, 0.510), vec3(0.533, 0.898, 0.533),
                                    vec3(0.365, 0.898, 0.576), vec3(0.000, 0.894, 0.631), vec3(0.000, 0.890, 0.694), vec3(0.000, 0.878, 0.757),
                                    vec3(0.000, 0.867, 0.824), vec3(0.000, 0.847, 0.886), vec3(0.000, 0.824, 0.941), vec3(0.000, 0.792, 0.992),
                                    vec3(0.000, 0.753, 1.000), vec3(0.176, 0.710, 1.000), vec3(0.459, 0.659, 1.000), vec3(0.624, 0.600, 1.000),
                                    vec3(0.745, 0.541, 1.000), vec3(0.839, 0.486, 1.000), vec3(0.906, 0.431, 0.961), vec3(0.949, 0.392, 0.894),
                                    vec3(0.976, 0.365, 0.820), vec3(0.984, 0.357, 0.733), vec3(0.980, 0.369, 0.639), vec3(0.965, 0.388, 0.537)
                                    
                                    );

uniform vec3 colors1h = vec3(1.0, 1.0, 0.0);
uniform vec3 colors2h = vec3(1.0, 0.0, 0.0);
uniform vec3 colors3h = vec3(1.0, 1.0, 1.0);


uniform float range1[32] = float[32](
                                     31250.0, 62500.0, 93750.0, 125000.0,
                                     156250.0, 187500.0, 218750.0, 250000.0,
                                     281250.0, 312500.0, 343750.0, 375000.0,
                                     406250.0, 437500.0, 468750.0, 500000.0,
                                     531250.0, 562500.0, 593750.0, 625000.0,
                                     656250.0, 687500.0, 718750.0, 750000.0,
                                     781250.0, 812500.0, 843750.0, 875000.0,
                                     906250.0, 937500.0, 968750.0, 1000000.0
                                     
                                     );



void main(void)
{
    
    
    var_Attribs = colorToGeom = gl_Color.rgb;
    
    unif_Alpha = gl_Color.a;
    
    
    if (unif_Alpha == 1.0) {
        
        for (int i = 0; i < range1.length(); i++) {
            
            //if (i > 24) {
            //    gl_FrontColor.rgb = vec3(0.0, 0.0, 0.0);
            //    break;
            //}
                
            
            if (var_Attribs[2] < range1[i]) {
                gl_FrontColor.rgb = colors3[i];
                break;
            }
        }
    }
    else if (unif_Alpha == 2.0) {
        
        gl_FrontColor.rgb = colors3h;
        
        
    }
    
    
    
    gl_FrontColor.a = unif_Alpha;
    
    
    //gl_FrontColor = gl_Color;
    
    
    // return projection position
    gl_Position = gl_ModelViewMatrix * gl_Vertex;
}
